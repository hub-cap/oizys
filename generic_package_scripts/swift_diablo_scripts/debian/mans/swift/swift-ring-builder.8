.TH swift\-ring\-builder 8
.SH NAME
swift\-ring\-builder \- Manipulate the swift ring storage devices.

.SH SYNOPSIS
.B swift\-ring\-builder
.B <builder_file>
.B [ACTION]
.B [parameters]

.SH DESCRIPTION
.B swift\-ring\-builder

Manipulate the swift ring. Please contribute a better long description!

.SH PARAMETERS

The parameter [ACTION] can take one of the following values:

.B create
.B search
.B add
.B set_weight
.B set_info
.B remove
.B rebalance
.B validate
.B write_ring
.B set_min_part_hours

If action is not specified, then swift\-ring\-builder will display all the
storage devices. Below is a full description of each individual actions.
In each individual action, you may specify a <search\-value>. In that case,
then <search\-value> can be of the form:

d<device_id>z<zone>\-<ip>:<port>/<device_name>_<meta>

Any part is optional, but you must include at least one part. Examples:

.B d74
Matches the device id 74

.B z1
Matches devices in zone 1

.B z1-1.2.3.4
Matches devices in zone 1 with the ip 1.2.3.4

.B 1.2.3.4
Matches devices in any zone with the ip 1.2.3.4

.B z1:5678
Matches devices in zone 1 using port 5678

.B :5678
Matches devices that use port 5678

.B /sdb1
Matches devices with the device name sdb1

.B _shiny
Matches devices with shiny in the meta data

.B _"snet: 5.6.7.8"
Matches devices with snet: 5.6.7.8 in the meta data

Most specific example: d74z1-1.2.3.4:5678/sdb1_"snet: 5.6.7.8"

Nerd explanation: All items require their single character prefix except the
ip, in which case the - is optional unless the device id or zone is also
included.

.SH CREATE
.B swift-ring-builder
.B <builder_file>
.B create
.B <part_power>
.B <replicas>
.B <min_part_hours>

Creates <builder_file> with 2^<part_power> partitions and <replicas>.
<min_part_hours> is number of hours to restrict moving a partition more
than once.

.SH SHOW
.B swift-ring-builder
.B <builder_file>

Shows information about the ring and the devices within.

.SH SEARCH
.B swift-ring-builder
.B <builder_file>
.B search
.B <search-value>

Shows information about matching devices.

.SH ADD
.B swift-ring-builder
.B <builder_file>
.B add
.B z<zone>-<ip>:<port>/<device_name>_<meta>
.B <weight>

Adds a device to the ring with the given information. No partitions will be
assigned to the new device until after running 'rebalance'. This is so you can
make multiple device changes and rebalance them all just once.

.SH SET WEIGHT
.B swift-ring-builder
.B <builder_file>
.B set_weight
.B <search-value>
.B <weight>

Resets the device's weight. No partitions will be reassigned to or from the
device until after running 'rebalance'. This is so you can make multiple device
changes and rebalance them all just once.

.SH SET INFO
.B swift-ring-builder
.B <builder_file>
.B set_info
.B <search-value>
.B <ip>:<port>/<device_name>_<meta>

Resets the device's information. This information isn't used to assign
partitions, so you can use 'write_ring' afterward to rewrite the current ring
with the newer device information. Any of the parts are optional in the final
<ip>:<port>/<device_name>_<meta> parameter; just give what you want to change.
For instance set_info d74 _"snet: 5.6.7.8" would just update the meta data for
device id 74.

.SH REMOVE
.B swift-ring-builder
.B <builder_file>
.B remove
.B <search-value>

Removes the device(s) from the ring. This should normally just be used for a
device that has failed. For a device you wish to decommission, it's best to set
its weight to 0, wait for it to drain all its data, then use this remove
command. This will not take effect until after running 'rebalance'. This is so
you can make multiple device changes and rebalance them all just once.

.SH REBALANCE
.B swift-ring-builder
.B <builder_file>
.B rebalance

Attempts to rebalance the ring by reassigning partitions that haven't been
recently reassigned.

.SH VALIDATE
.B swift-ring-builder
.B <builder_file>
.B validate

Just runs the validation routines on the ring.

.SH WRITE RING
.B swift-ring-builder
.B <builder_file>
.B write_ring

Just rewrites the distributable ring file. This is done automatically after a
successful rebalance, so really this is only useful after one or more
set_info calls when no rebalance is needed but you want to send out the new
device information.

.SH SET MIN PART HOURS
.B swift-ring-builder
.B <builder_file>
.B set_min_part_hours
.B <hours>

Changes the <min_part_hours> to the given <hours>. This should be set to
however long a full replication/update cycle takes. We're working on a way
to determine this more easily than scanning logs.
