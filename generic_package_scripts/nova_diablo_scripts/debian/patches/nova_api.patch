Index: reddwarf/nova/api/openstack/faults.py
===================================================================
--- reddwarf.orig/nova/api/openstack/faults.py	2012-01-03 14:44:27.000000000 -0600
+++ reddwarf/nova/api/openstack/faults.py	2012-01-03 14:47:16.000000000 -0600
@@ -35,6 +35,8 @@
             409: "inProgress",
             413: "overLimit",
             415: "badMediaType",
+            422: "unprocessableEntity",
+            500: "instanceFault",
             501: "notImplemented",
             503: "serviceUnavailable"}
 
@@ -48,7 +50,7 @@
         """Generate a WSGI response based on the exception passed to ctor."""
         # Replace the body with fault details.
         code = self.wrapped_exc.status_int
-        fault_name = self._fault_names.get(code, "cloudServersFault")
+        fault_name = self._fault_names.get(code, "instanceFault")
         fault_data = {
             fault_name: {
                 'code': code,
Index: reddwarf/nova/api/openstack/servers.py
===================================================================
--- reddwarf.orig/nova/api/openstack/servers.py	2012-01-03 14:44:32.000000000 -0600
+++ reddwarf/nova/api/openstack/servers.py	2012-01-03 14:47:10.000000000 -0600
@@ -1011,6 +1011,7 @@
                        "status", "progress", "adminPass", "flavorRef",
                        "imageRef", "userId", "tenantId"],
             "link": ["rel", "type", "href"],
+            "volume": ["id", "name", "description", "size"],
         },
         "dict_collections": {
             "metadata": {"item_name": "meta", "item_key": "key"},
Index: reddwarf/nova/api/openstack/views/servers.py
===================================================================
--- reddwarf.orig/nova/api/openstack/views/servers.py	2012-01-03 14:44:19.000000000 -0600
+++ reddwarf/nova/api/openstack/views/servers.py	2012-01-03 14:47:26.000000000 -0600
@@ -83,6 +83,8 @@
         self._build_image(inst_dict, inst)
         self._build_flavor(inst_dict, inst)
         self._build_addresses(inst_dict, inst)
+        self._build_volume(inst_dict, inst)
+        self._build_hostname(inst_dict, inst)
 
         return dict(server=inst_dict)
 
@@ -180,6 +182,18 @@
                 ]
             }
 
+    def _build_volume(self, response, inst):
+        volumes = inst['volumes']
+        if volumes:
+            response["volumes"] = []
+            for volume in volumes:
+                vol = {}
+                vol['id'] = volume.id
+                vol['name'] = volume.display_name
+                vol['description'] = volume.display_description
+                vol['size'] = volume.size
+                response["volumes"].append(vol)
+
     def _build_addresses(self, response, inst):
         interfaces = inst.get('virtual_interfaces', [])
         response['addresses'] = self.addresses_builder.build(interfaces)
@@ -205,6 +219,9 @@
 
         response["links"] = links
 
+    def _build_hostname(self, response, inst):
+        response['hostname'] = inst.get('hostname')
+
     def generate_href(self, server_id):
         """Create an url that refers to a specific server id."""
         return os.path.join(self.base_url, self.project_id,
Index: reddwarf/nova/api/openstack/wsgi.py
===================================================================
--- reddwarf.orig/nova/api/openstack/wsgi.py	2012-01-03 14:44:39.000000000 -0600
+++ reddwarf/nova/api/openstack/wsgi.py	2012-01-03 14:47:21.000000000 -0600
@@ -11,7 +11,7 @@
 from nova import wsgi
 
 
-XMLNS_V10 = 'http://docs.rackspacecloud.com/servers/api/v1.0'
+XMLNS_V10 = 'http://docs.openstack.org/database/api/v1.0'
 XMLNS_V11 = 'http://docs.openstack.org/compute/api/v1.1'
 
 XMLNS_ATOM = 'http://www.w3.org/2005/Atom'
@@ -229,15 +229,15 @@
             content_type = request.get_content_type()
         except exception.InvalidContentType:
             LOG.debug(_("Unrecognized Content-Type provided in request"))
-            return {}
+            return self._return_empty_body(action)
 
         if content_type is None:
             LOG.debug(_("No Content-Type provided in request"))
-            return {}
+            return self._return_empty_body(action)
 
         if not len(request.body) > 0:
             LOG.debug(_("Empty body provided in request"))
-            return {}
+            return self._return_empty_body(action)
 
         try:
             deserializer = self.get_body_deserializer(content_type)
@@ -247,6 +247,12 @@
 
         return deserializer.deserialize(request.body, action)
 
+    def _return_empty_body(self, action):
+        if action in ["create", "update", "action"]:
+            return {'body': None}
+        else:
+            return {}
+
     def get_body_deserializer(self, content_type):
         try:
             return self.body_deserializers[content_type]
@@ -485,6 +491,8 @@
         except exception.MalformedRequestBody:
             msg = _("Malformed request body")
             return faults.Fault(webob.exc.HTTPBadRequest(explanation=msg))
+        except Exception as e:
+            return faults.Fault(e)
 
         project_id = args.pop("project_id", None)
         if 'nova.context' in request.environ and project_id:
@@ -493,7 +501,7 @@
         try:
             action_result = self.dispatch(request, action, args)
         except webob.exc.HTTPException as ex:
-            LOG.info(_("HTTP exception thrown: %s"), unicode(ex))
+            LOG.exception(_("HTTP exception thrown: %s"), unicode(ex))
             action_result = faults.Fault(ex)
 
         if type(action_result) is dict or action_result is None:
